@model CurrencyComparisonModel
@using CurrencyComparisonTool.Models

@if (Model.b_convertedAmount > 0)
{
    <div id="results-anchor"></div>
    <div class="results-section">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-10">
                    <div class="results-header text-center mb-5">
                        <h2 class="results-title">Comparison Results</h2>
                        <p class="results-subtitle">See how much you can save with ClearShift</p>
                    </div>

                    <div class="comparison-grid">
                        <!-- Bank Result -->
                        <div class="result-card bank-card">
                            <div class="result-header">
                                <div class="provider-info">
                                    <i class="bi bi-building provider-icon bank-icon"></i>
                                    <span class="provider-name">Your Bank</span>
                                </div>
                                <div class="rate-badge bank-badge">
                                    Traditional Rate
                                </div>
                            </div>
                            <div class="result-body">
                                <div class="amount-display">
                                    <span
                                        class="currency-symbol">@CurrencyConstants.CurrencySymbols[Model.TargetCurrency]</span>
                                    <span class="amount-value">@Model.b_convertedAmount.ToString("N2")</span>
                                </div>
                                <div class="rate-details">
                                    <small class="text-muted">
                                        Rate: @Model.BankRate | Fees: @(Model.BankFees?.ToString("0.##") ?? "1.25")%
                                    </small>
                                </div>
                            </div>
                        </div>

                        <!-- VS Indicator -->
                        <div class="vs-indicator">
                            <span class="vs-text">VS</span>
                        </div>

                        <!-- ClearShift Result -->
                        <div class="result-card clearshift-card">
                            <div class="result-header">
                                <div class="provider-info">
                                    <i class="bi bi-lightning provider-icon clearshift-icon"></i>
                                    <span class="provider-name">ClearShift</span>
                                </div>
                                <div class="rate-badge clearshift-badge">
                                    Better Rate
                                </div>
                            </div>
                            <div class="result-body">
                                <div class="amount-display">
                                    <span
                                        class="currency-symbol">@CurrencyConstants.CurrencySymbols[Model.TargetCurrency]</span>
                                    <span class="amount-value">@Model.cs_convertedAmount.ToString("N2")</span>
                                </div>
                                <div class="rate-details">
                                    <small class="text-muted">
                                        Bank of Israel rate | Fees: @(Model.CSFees?.ToString("0.##") ?? "1.00")%
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Savings Highlight -->
                    <div class="savings-highlight">
                        <div class="savings-card">
                            <div class="savings-icon">
                                <i class="bi bi-piggy-bank"></i>
                            </div>
                            <div class="savings-content">
                                <h4 class="savings-title">Your Potential Savings</h4>
                                <div class="savings-amount">
                                    <span
                                        class="currency-symbol">@CurrencyConstants.CurrencySymbols[Model.TargetCurrency]</span>
                                    <span class="amount-value">@Math.Abs(Model.Savings).ToString("N2")</span>
                                </div>
                                @if (Model.Savings > 0)
                                {
                                    <p class="savings-text success">
                                        <i class="bi bi-arrow-up-circle-fill me-1"></i>
                                        You save more with ClearShift!
                                    </p>
                                }
                                else if (Model.Savings < 0)
                                {
                                    <p class="savings-text warning">
                                        <i class="bi bi-info-circle-fill me-1"></i>
                                        Your bank offers a better rate for this transaction
                                    </p>
                                }
                                else
                                {
                                    <p class="savings-text neutral">
                                        <i class="bi bi-dash-circle-fill me-1"></i>
                                        Both options offer similar value
                                    </p>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="action-buttons">
                        <button type="button" class="btn btn-outline-primary btn-lg" onclick="window.print()">
                            <i class="bi bi-printer me-2"></i>
                            Print Results
                        </button>
                        <button type="button" class="btn btn-success btn-lg" onclick="exportReport()">
                            <i class="bi bi-file-earmark-pdf me-2"></i>
                            Export ClearShift Report
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-lg" onclick="startNewComparison()">
                            <i class="bi bi-arrow-clockwise me-2"></i>
                            New Comparison
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        function startNewComparison() {
            // Reset form values
            document.querySelector('input[name="Amount"]').value = '';
            document.querySelector('input[name="BankRate"]').value = '';
            document.querySelector('input[name="BankFees"]').value = '';
            // Scroll to top
            window.scrollTo({ top: 0, behavior: 'smooth' });
            // Focus on amount input
            document.querySelector('input[name="Amount"]').focus();
        }

        function exportReport() {
            // Create a form to submit the export request
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/Home/ExportReport';
            
            // Add current model data as hidden inputs
            const modelData = {
                'Date': '@Model.Date.ToString("yyyy-MM-dd")',
                'Amount': '@Model.Amount',
                'SourceCurrency': '@Model.SourceCurrency',
                'TargetCurrency': '@Model.TargetCurrency',
                'BankRate': '@Model.BankRate',
                'BankFees': '@(Model.BankFees ?? 0)',
                'CSFees': '@(Model.CSFees ?? 0)',
                'b_convertedAmount': '@Model.b_convertedAmount',
                'cs_convertedAmount': '@Model.cs_convertedAmount',
                'Savings': '@Model.Savings'
            };
            
            Object.keys(modelData).forEach(key => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = key;
                input.value = modelData[key];
                form.appendChild(input);
            });
            
            // Add anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            if (token) {
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = token.value;
                form.appendChild(tokenInput);
            }
            
            document.body.appendChild(form);
            form.submit();
            document.body.removeChild(form);
        }
    </script>
}