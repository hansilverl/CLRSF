@model CurrencyComparisonModel
@using CurrencyComparisonTool.Models

<form asp-action="Calculate" method="post" class="modern-form">
    <!-- Amount and Currency Row -->
    <div class="form-row primary-row">
        <div class="amount-section">
            <label for="AmountDisplay" class="form-label">
                Amount
            </label>
            <div class="amount-wrapper">
                <input id="AmountDisplay" type="text" class="amount-input" autocomplete="off" />
                <input asp-for="Amount" type="hidden" id="Amount" />
            </div>
            <span asp-validation-for="Amount" class="validation-error"></span>
            <span id="AmountCustomError" class="validation-error" style="display:none;">Enter an amount over 30K</span>
        </div>

        <div class="currency-pair-container">
            <div class="currency-pair">
                <div class="currency-selector">
                    <label asp-for="SourceCurrency" class="form-label">
                        From
                    </label>
                    <div class="currency-wrapper">
                        <select asp-for="SourceCurrency" class="currency-dropdown" onchange="handleCurrencyChange()">
                            @foreach (var currency in CurrencyConstants.AllowedCurrencies)
                            {
                                <option value="@currency" selected="@(currency == Model.SourceCurrency)">
                                    @CurrencyConstants.CurrencySymbols[currency] @currency
                                </option>
                            }
                        </select>
                    </div>
                </div>

                <div class="swap-button-container">
                    <button type="button" class="swap-currencies-btn" onclick="swapCurrencies()" aria-label="Swap currencies">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 17 17" aria-hidden="true" class="swap-icon">
                            <path fill="currentColor" fill-rule="evenodd" d="M11.726 1.273l2.387 2.394H.667V5h13.446l-2.386 2.393.94.94 4-4-4-4-.94.94zM.666 12.333l4 4 .94-.94L3.22 13h13.447v-1.333H3.22l2.386-2.394-.94-.94-4 4z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                </div>

                <div class="currency-selector">
                    <label asp-for="TargetCurrency" class="form-label">
                        To
                    </label>
                    <div class="currency-wrapper">
                        <select asp-for="TargetCurrency" class="currency-dropdown" onchange="handleCurrencyChange()">
                            @foreach (var currency in CurrencyConstants.AllowedCurrencies)
                            {
                                <option value="@currency" selected="@(currency == Model.TargetCurrency)">
                                    @CurrencyConstants.CurrencySymbols[currency] @currency
                                </option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Details Row -->
    <div class="form-row details-row">
        <div class="form-group">
            <label asp-for="Date" class="form-label">
                <i class="bi bi-calendar3 me-1"></i>
                Transaction Date
            </label>
            <input asp-for="Date" type="date" class="form-control modern-input" />
            <span asp-validation-for="Date" class="validation-error"></span>
        </div>

        <div class="form-group">
            <label asp-for="BankRate" class="form-label">
                <i class="bi bi-graph-up me-1"></i>
                Bank Exchange Rate
            </label>
            <input asp-for="BankRate" type="number" step="0.0001" class="form-control modern-input" />
            <span asp-validation-for="BankRate" class="validation-error"></span>
        </div>

        <div class="form-group">
            <label asp-for="BankFees" class="form-label">
                <i class="bi bi-percent me-1"></i>
                Bank Fees (%)
            </label>
            <div class="input-group">
                <input asp-for="BankFees" type="number" step="0.01" class="form-control modern-input"
                    placeholder="1.25" />
                <span class="input-group-text">%</span>
            </div>
            <span asp-validation-for="BankFees" class="validation-error"></span>
        </div>
    </div>

    <!-- Submit Button -->
    <div class="submit-section">
        <button type="submit" class="btn btn-primary btn-lg compare-button">
            <i class="bi bi-calculator me-2"></i>
            Compare
        </button>
    </div>
</form>

<script>
    function formatNumberWithCommas(num) {
        let cleanNum = num.toString().replace(/[^\d.]/g, '');
        let parts = cleanNum.split('.');
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        return parts.join('.');
    }

    document.addEventListener('DOMContentLoaded', function () {
        const amountDisplay = document.getElementById('AmountDisplay');
        const amountHidden = document.getElementById('Amount');
        if (!amountDisplay || !amountHidden) return;

        // Initialize display with formatted value if present
        if (amountHidden.value && amountHidden.value !== '0') {
            amountDisplay.value = formatNumberWithCommas(amountHidden.value);
        }

        // On input, format display and update hidden
        amountDisplay.addEventListener('input', function (e) {
            let raw = e.target.value.replace(/,/g, '');
            if (raw) {
                let formatted = formatNumberWithCommas(raw);
                amountDisplay.value = formatted;
                amountHidden.value = raw;
                // Hide error if valid, but don't show if invalid
                const customError = document.getElementById('AmountCustomError');
                if (parseFloat(raw) >= 30000 || raw === '') {
                    customError.style.display = 'none';
                }
            } else {
                amountHidden.value = '';
                document.getElementById('AmountCustomError').style.display = 'none';
            }
        });

        // On blur, show error if invalid
        amountDisplay.addEventListener('blur', function (e) {
            let raw = e.target.value.replace(/,/g, '');
            const customError = document.getElementById('AmountCustomError');
            if (raw && parseFloat(raw) < 30000) {
                customError.style.display = '';
            } else {
                customError.style.display = 'none';
            }
        });

        // On paste, format and update hidden
        amountDisplay.addEventListener('paste', function (e) {
            setTimeout(() => {
                let raw = amountDisplay.value.replace(/,/g, '');
                amountDisplay.value = formatNumberWithCommas(raw);
                amountHidden.value = raw;
            }, 0);
        });

        // On submit, ensure hidden field is correct
        document.querySelector('.modern-form').addEventListener('submit', function (e) {
            let raw = amountDisplay.value.replace(/,/g, '');
            amountHidden.value = raw;
            // Append #results-anchor to form action so browser scrolls after reload
            var form = e.target;
            if (form.action.indexOf('#results-anchor') === -1) {
                form.action = form.action + '#results-anchor';
            }
        });
    });

    function handleCurrencyChange() {
        const sourceDropdown = document.getElementById('SourceCurrency');
        const targetDropdown = document.getElementById('TargetCurrency');
        const sourceValue = sourceDropdown.value;
        const targetValue = targetDropdown.value;

        // Ensure at least one currency is ILS
        if (sourceValue !== 'ILS' && targetValue !== 'ILS') {
            targetDropdown.value = 'ILS';
        }

        // Prevent both currencies from being the same
        if (sourceValue === targetValue) {
            if (sourceValue === 'ILS') {
                targetDropdown.value = 'USD';
            } else {
                targetDropdown.value = 'ILS';
            }
        }
    }

    function swapCurrencies() {
        const sourceDropdown = document.getElementById('SourceCurrency');
        const targetDropdown = document.getElementById('TargetCurrency');

        const tempValue = sourceDropdown.value;
        sourceDropdown.value = targetDropdown.value;
        targetDropdown.value = tempValue;

        handleCurrencyChange();
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function () {
        handleCurrencyChange();
    });
</script>