@model CurrencyComparisonModel
@using CurrencyComparisonTool.Models

<form asp-action="Calculate" method="post" class="modern-form">
    <!-- Amount and Currency Row -->
    <div class="form-row primary-row">
        <div class="amount-section">
            <label class="form-label">Amount</label>
            <div class="amount-input-wrapper">
                <input asp-for="Amount" type="text" class="amount-input" placeholder="50,000" id="amountInput" />
                <span asp-validation-for="Amount" class="validation-error"></span>
            </div>
        </div>

        <div class="currency-section">
            <div class="currency-pair">
                <div class="currency-selector">
                    <label class="form-label">From</label>
                    <select asp-for="SourceCurrency" class="currency-dropdown" id="sourceCurrency" onchange="handleCurrencyChange()">
                        @foreach (var currency in CurrencyConstants.AllowedCurrencies)
                        {
                            <option value="@currency" selected="@(currency == Model.SourceCurrency)">
                                @CurrencyConstants.CurrencySymbols[currency] @currency
                            </option>
                        }
                    </select>
                </div>

                <div class="currency-swap">
                    <button type="button" class="swap-button" onclick="swapCurrencies()" title="Swap currencies">
                        <i class="bi bi-arrow-left-right"></i>
                    </button>
                </div>

                <div class="currency-selector">
                    <label class="form-label">To</label>
                    <select asp-for="TargetCurrency" class="currency-dropdown" id="targetCurrency" onchange="handleCurrencyChange()">
                        @foreach (var currency in CurrencyConstants.AllowedCurrencies)
                        {
                            <option value="@currency" selected="@(currency == Model.TargetCurrency)">
                                @CurrencyConstants.CurrencySymbols[currency] @currency
                            </option>
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Details Row -->
    <div class="form-row details-row">
        <div class="form-group">
            <label asp-for="Date" class="form-label">
                <i class="bi bi-calendar3 me-1"></i>
                Transaction Date
            </label>
            <input asp-for="Date" type="date" class="form-control modern-input" />
            <span asp-validation-for="Date" class="validation-error"></span>
        </div>

        <div class="form-group">
            <label asp-for="BankRate" class="form-label">
                <i class="bi bi-graph-up me-1"></i>
                Bank Exchange Rate
            </label>
            <input asp-for="BankRate" type="number" step="0.0001" class="form-control modern-input" placeholder="3.7500" />
            <span asp-validation-for="BankRate" class="validation-error"></span>
        </div>

        <div class="form-group">
            <label asp-for="BankFees" class="form-label">
                <i class="bi bi-percent me-1"></i>
                Bank Fees (%)
            </label>
            <div class="input-group">
                <input asp-for="BankFees" type="number" step="0.01" class="form-control modern-input" placeholder="1.25" />
                <span class="input-group-text">%</span>
            </div>
            <span asp-validation-for="BankFees" class="validation-error"></span>
        </div>
    </div>

    <!-- Submit Button -->
    <div class="submit-section">
        <button type="submit" class="btn btn-primary btn-lg compare-button">
            <i class="bi bi-calculator me-2"></i>
            Compare Rates
        </button>
    </div>
</form>

<script>
// Format number with commas
function formatNumber(num) {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

// Parse number removing commas
function parseNumber(str) {
    return str.replace(/,/g, "");
}

// Handle amount input formatting
document.addEventListener('DOMContentLoaded', function() {
    const amountInput = document.getElementById('amountInput');
    
    // Format on input
    amountInput.addEventListener('input', function(e) {
        let value = e.target.value.replace(/[^\d.]/g, '');
        if (value) {
            let parts = value.split('.');
            parts[0] = formatNumber(parts[0]);
            e.target.value = parts.join('.');
        }
    });
    
    // Parse before form submission
    document.querySelector('.modern-form').addEventListener('submit', function(e) {
        amountInput.value = parseNumber(amountInput.value);
    });
});

function handleCurrencyChange() {
    const sourceDropdown = document.getElementById('sourceCurrency');
    const targetDropdown = document.getElementById('targetCurrency');
    const sourceValue = sourceDropdown.value;
    const targetValue = targetDropdown.value;
    
    // Ensure at least one currency is ILS
    if (sourceValue !== 'ILS' && targetValue !== 'ILS') {
        targetDropdown.value = 'ILS';
    }
    
    // Prevent both currencies from being the same
    if (sourceValue === targetValue) {
        if (sourceValue === 'ILS') {
            targetDropdown.value = 'USD';
        } else {
            targetDropdown.value = 'ILS';
        }
    }
}

function swapCurrencies() {
    const sourceDropdown = document.getElementById('sourceCurrency');
    const targetDropdown = document.getElementById('targetCurrency');
    
    const tempValue = sourceDropdown.value;
    sourceDropdown.value = targetDropdown.value;
    targetDropdown.value = tempValue;
    
    handleCurrencyChange();
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    handleCurrencyChange();
});
</script>