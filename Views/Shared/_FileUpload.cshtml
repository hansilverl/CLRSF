@model CurrencyComparisonModel

<div class="upload-section">
    <div class="upload-area" id="uploadArea" 
         ondragover="handleDragOver(event)" 
         ondragleave="handleDragLeave(event)" 
         ondrop="handleFileDrop(event)">
        <div class="upload-icon">
            <i class="bi bi-cloud-upload"></i>
        </div>
        <h4>Upload Bank Statement</h4>
        <p class="text-muted">
            Drag & drop your bank statement here or click to browse
        </p>
        <p class="text-muted small">
            Supported formats: PDF, CSV, and TXT files
        </p>
        
        <div class="file-input-wrapper">
            <input type="file" id="fileInput" class="file-input" accept=".pdf,.csv,.txt" />
            <label for="fileInput" class="btn btn-outline-primary btn-lg">
                <i class="bi bi-paperclip me-2"></i>
                Choose File
            </label>
        </div>
        
        <div class="file-info" id="fileInfo" style="display: none;">
            <div class="file-preview">
                <i class="bi bi-file-earmark-text"></i>
                <span class="file-name"></span>
                <button type="button" class="btn-remove" onclick="removeFile()">
                    <i class="bi bi-x"></i>
                </button>
            </div>
        </div>
        
        <div id="uploadError" class="text-danger text-center mt-3" style="display: none;"></div>
    </div>
    
    <div class="upload-features">
        <div class="row">
            <div class="col-md-4">
                <div class="feature-item">
                    <i class="bi bi-shield-check text-success"></i>
                    <h6>Secure Processing</h6>
                    <small class="text-muted">Your files are processed securely and not stored</small>
                </div>
            </div>
            <div class="col-md-4">
                <div class="feature-item">
                    <i class="bi bi-lightning-charge text-primary"></i>
                    <h6>Quick Analysis</h6>
                    <small class="text-muted">Instant extraction of rate information</small>
                </div>
            </div>
            <div class="col-md-4">
                <div class="feature-item">
                    <i class="bi bi-file-earmark-spreadsheet text-info"></i>
                    <h6>Multiple Formats</h6>
                    <small class="text-muted">Supports PDF, CSV, and text files</small>
                </div>
            </div>
        </div>
    </div>
    
    <div class="manual-fallback">
        <p class="text-muted text-center">
            <small>Can't upload a file? <a href="#" onclick="switchToManual()">Switch to manual input</a></small>
        </p>
    </div>
</div>

<script>
// File input change handler
document.getElementById('fileInput').addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
        processSelectedFile(file);
    }
});

// Make entire upload area clickable
document.getElementById('uploadArea').addEventListener('click', function(e) {
    // Don't trigger if clicking on the actual button or remove button
    if (!e.target.closest('.btn') && !e.target.closest('.btn-remove')) {
        document.getElementById('fileInput').click();
    }
});

// Drag and drop handlers
function handleDragOver(e) {
    e.preventDefault();
    e.stopPropagation();
    const uploadArea = document.getElementById('uploadArea');
    uploadArea.classList.add('drag-over');
    uploadArea.style.borderColor = 'var(--clearshift-teal)';
    uploadArea.style.backgroundColor = 'rgba(74, 157, 168, 0.1)';
}

function handleDragLeave(e) {
    e.preventDefault();
    e.stopPropagation();
    
    // Only remove styles if we're actually leaving the upload area
    if (!e.currentTarget.contains(e.relatedTarget)) {
        const uploadArea = document.getElementById('uploadArea');
        uploadArea.classList.remove('drag-over');
        uploadArea.style.borderColor = '';
        uploadArea.style.backgroundColor = '';
    }
}

function handleFileDrop(e) {
    e.preventDefault();
    e.stopPropagation();
    
    const uploadArea = document.getElementById('uploadArea');
    uploadArea.classList.remove('drag-over');
    uploadArea.style.borderColor = '';
    uploadArea.style.backgroundColor = '';
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
        const file = files[0];
        processSelectedFile(file);
        
        // Update the file input
        const fileInput = document.getElementById('fileInput');
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        fileInput.files = dataTransfer.files;
    }
}

function processSelectedFile(file) {
    const allowedTypes = ['.pdf', '.csv', '.txt'];
    const fileName = file.name.toLowerCase();
    const isValidType = allowedTypes.some(type => fileName.endsWith(type));
    
    const errorDiv = document.getElementById('uploadError');
    
    if (!isValidType) {
        errorDiv.textContent = 'Please upload a valid file (PDF, CSV, or TXT only)';
        errorDiv.style.display = 'block';
        removeFile();
        return;
    }
    
    // Check file size (limit to 10MB)
    const maxSize = 10 * 1024 * 1024; // 10MB in bytes
    if (file.size > maxSize) {
        errorDiv.textContent = 'File size must be less than 10MB';
        errorDiv.style.display = 'block';
        removeFile();
        return;
    }
    
    // Hide error and show file info
    errorDiv.style.display = 'none';
    document.querySelector('.file-name').textContent = file.name;
    document.getElementById('fileInfo').style.display = 'block';
    
    // Here you would typically send the file to the server for processing
    // For now, we'll just show the file selection
    console.log('File selected:', file.name, 'Size:', file.size, 'Type:', file.type);
}

function removeFile() {
    document.getElementById('fileInput').value = '';
    document.getElementById('fileInfo').style.display = 'none';
    document.getElementById('uploadError').style.display = 'none';
}

function switchToManual() {
    // Find and click the manual input tab button
    const manualTab = document.querySelector('[data-tab="manual"]');
    if (manualTab) {
        manualTab.click();
    } else {
        // Alternative method if tab structure is different
        const tabButtons = document.querySelectorAll('.tab-button');
        tabButtons.forEach(button => {
            if (button.textContent.includes('Manual') || button.textContent.includes('manual')) {
                button.click();
            }
        });
    }
}

// Prevent default drag behaviors on the document
document.addEventListener('dragover', function(e) {
    e.preventDefault();
});

document.addEventListener('drop', function(e) {
    e.preventDefault();
});
</script>