@using CurrencyComparisonTool.Models
@model CurrencyComparisonModel

<div class="upload-section">
    <div class="upload-area" id="uploadArea" 
         ondragover="handleDragOver(event)" 
         ondragleave="handleDragLeave(event)" 
         ondrop="handleFileDrop(event)">
        <div class="upload-icon">
            <i class="bi bi-cloud-upload"></i>
        </div>
        <h4>Upload Bank Statement</h4>
        <p class="text-muted">
            Drag & drop your bank statement here or click to browse
        </p>
        <p class="text-muted small">
            Supported formats: PDF, CSV, and TXT files
        </p>
        
        <div class="file-input-wrapper">
            <input type="file" id="fileInput" name="file" class="file-input" accept=".pdf,.csv,.txt" />
            <label for="fileInput" class="btn btn-outline-primary btn-lg">
                <i class="bi bi-paperclip me-2"></i>
                Choose File
            </label>
        </div>
        
        <div class="file-info" id="fileInfo" style="display: none;">
            <div class="file-preview">
                <i class="bi bi-file-earmark-text"></i>
                <span class="file-name"></span>
                <button type="button" class="btn-remove" onclick="removeFile()">
                    <i class="bi bi-x"></i>
                </button>
            </div>
        </div>
        
        <div id="uploadError" class="text-danger text-center mt-3" style="display: none;"></div>
        
        <button type="button" id="uploadBtn" class="btn btn-primary mt-3" style="display: none;" onclick="processFile()">
            <i class="bi bi-upload me-2"></i>
            Process File
        </button>
    </div>
    
    <div class="upload-features">
        <div class="row">
            <div class="col-md-4">
                <div class="feature-item">
                    <i class="bi bi-shield-check text-success"></i>
                    <h6>Secure Processing</h6>
                    <small class="text-muted">Your files are processed securely and not stored</small>
                </div>
            </div>
            <div class="col-md-4">
                <div class="feature-item">
                    <i class="bi bi-lightning-charge text-primary"></i>
                    <h6>Quick Analysis</h6>
                    <small class="text-muted">Instant extraction of rate information</small>
                </div>
            </div>
            <div class="col-md-4">
                <div class="feature-item">
                    <i class="bi bi-file-earmark-spreadsheet text-info"></i>
                    <h6>Multiple Formats</h6>
                    <small class="text-muted">Supports PDF, CSV, and text files</small>
                </div>
            </div>
        </div>
    </div>
    
    <div class="manual-fallback">
        <p class="text-muted text-center">
            <small>Can't upload a file? <a href="#" onclick="switchToManual()">Switch to manual input</a></small>
        </p>
    </div>
    
    <!-- PDF Selector Overlay -->
    <div id="pdfSelectorOverlay" class="pdf-selector-overlay">
        <div class="pdf-selector-container">
            <!-- Header -->
            <div class="pdf-selector-header">
                <h2 class="pdf-selector-title">
                    <i class="bi bi-file-earmark-pdf"></i>
                    Bank Statement Field Mapper
                </h2>
                <button type="button" class="pdf-close-btn" id="closePdfSelector">
                    <i class="bi bi-x"></i>
                </button>
            </div>
            
            <!-- Main Content -->
            <div class="pdf-selector-content">
                <!-- PDF Viewer Panel -->
                <div class="pdf-viewer-panel">
                    <!-- PDF Controls -->
                    <div class="pdf-controls">
                        <div class="pdf-nav-controls">
                            <button type="button" class="pdf-control-btn" id="prevPage" title="Previous Page">
                                <i class="bi bi-chevron-left"></i>
                            </button>
                            <div class="page-display">
                                Page <span id="pageNum">1</span> of <span id="pageCount">0</span>
                            </div>
                            <button type="button" class="pdf-control-btn" id="nextPage" title="Next Page">
                                <i class="bi bi-chevron-right"></i>
                            </button>
                        </div>
                        
                        <div class="zoom-controls">
                            <button type="button" class="pdf-control-btn" id="zoomOut" title="Zoom Out">
                                <i class="bi bi-zoom-out"></i>
                            </button>
                            <div class="zoom-level">100%</div>
                            <button type="button" class="pdf-control-btn" id="zoomIn" title="Zoom In">
                                <i class="bi bi-zoom-in"></i>
                            </button>
                        </div>
                    </div>
                    
                    <!-- PDF Content -->
                    <div class="pdf-content-wrapper">
                        <div class="pdf-loading" id="pdfLoading">
                            <div class="spinner"></div>
                            <div>Loading PDF...</div>
                        </div>
                        <div class="pdf-page-container" style="display: none;" id="pdfPageContainer">
                            <div id="pdfTextContent" class="pdf-text-content"></div>
                        </div>
                    </div>
                </div>
                
                <!-- Field Mapping Panel -->
                <div class="field-mapping-panel">
                    <!-- Mapping Header -->
                    <div class="mapping-header">
                        <h3 class="mapping-title">
                            <i class="bi bi-diagram-3"></i>
                            Field Mapping
                        </h3>
                        <p class="mapping-subtitle">
                            Select text from the PDF, then click a field below to map the values automatically.
                        </p>
                    </div>
                    
                    <!-- Selected Text Display -->
                    <div class="selected-text-section">
                        <div class="selected-text-label">
                            <i class="bi bi-cursor-text"></i>
                            Selected Text
                        </div>
                        <div id="selectedText" class="selected-text-display">
                            Click on words or drag to select text from the PDF
                        </div>
                    </div>
                    
                    <!-- Unified Field Mapping Section -->
                    <div class="mapping-fields-section">
                        <h4 class="mapping-fields-title">
                            <i class="bi bi-check2-square"></i>
                            Transaction Fields
                        </h4>
                        <div class="mapping-fields-list">
                            <div class="mapping-field-item" data-field="date" title="Click to map selected text to transaction date">
                                <div class="field-header">
                                    <div class="field-label">
                                        <i class="bi bi-calendar-event field-icon"></i>
                                        Transaction Date
                                    </div>
                                    <div class="field-status empty">Empty</div>
                                </div>
                                <div class="field-content">
                                    <div class="field-value" id="mappedDate">Click to map selected text</div>
                                </div>
                                <button type="button" class="field-clear-btn" onclick="clearSingleField('date')" title="Clear this field">
                                    <i class="bi bi-x"></i>
                                </button>
                            </div>
                            
                            <div class="mapping-field-item" data-field="amount" title="Click to map selected text to transaction amount">
                                <div class="field-header">
                                    <div class="field-label">
                                        <i class="bi bi-currency-dollar field-icon"></i>
                                        Amount
                                    </div>
                                    <div class="field-status empty">Empty</div>
                                </div>
                                <div class="field-content">
                                    <div class="field-value" id="mappedAmount">Click to map selected text</div>
                                </div>
                                <button type="button" class="field-clear-btn" onclick="clearSingleField('amount')" title="Clear this field">
                                    <i class="bi bi-x"></i>
                                </button>
                            </div>
                            
                            <div class="mapping-field-item" data-field="sourceCurrency" title="Click to map selected text to source currency">
                                <div class="field-header">
                                    <div class="field-label">
                                        <i class="bi bi-arrow-right-circle field-icon"></i>
                                        From Currency
                                    </div>
                                    <div class="field-status empty">Empty</div>
                                </div>
                                <div class="field-content">
                                    <div class="field-value" id="mappedSourceCurrency">Click to map selected text</div>
                                </div>
                                <button type="button" class="field-clear-btn" onclick="clearSingleField('sourceCurrency')" title="Clear this field">
                                    <i class="bi bi-x"></i>
                                </button>
                            </div>
                            
                            <div class="mapping-field-item" data-field="targetCurrency" title="Click to map selected text to target currency">
                                <div class="field-header">
                                    <div class="field-label">
                                        <i class="bi bi-arrow-left-circle field-icon"></i>
                                        To Currency
                                    </div>
                                    <div class="field-status empty">Empty</div>
                                </div>
                                <div class="field-content">
                                    <div class="field-value" id="mappedTargetCurrency">Click to map selected text</div>
                                </div>
                                <button type="button" class="field-clear-btn" onclick="clearSingleField('targetCurrency')" title="Clear this field">
                                    <i class="bi bi-x"></i>
                                </button>
                            </div>
                            
                            <div class="mapping-field-item" data-field="bankRate" title="Click to map selected text to exchange rate">
                                <div class="field-header">
                                    <div class="field-label">
                                        <i class="bi bi-percent field-icon"></i>
                                        Exchange Rate
                                    </div>
                                    <div class="field-status empty">Empty</div>
                                </div>
                                <div class="field-content">
                                    <div class="field-value" id="mappedBankRate">Click to map selected text</div>
                                </div>
                                <button type="button" class="field-clear-btn" onclick="clearSingleField('bankRate')" title="Clear this field">
                                    <i class="bi bi-x"></i>
                                </button>
                            </div>
                            
                            <div class="mapping-field-item" data-field="fees" title="Click to map selected text to transaction fees">
                                <div class="field-header">
                                    <div class="field-label">
                                        <i class="bi bi-receipt field-icon"></i>
                                        Transaction Fees
                                    </div>
                                    <div class="field-status empty">Empty</div>
                                </div>
                                <div class="field-content">
                                    <div class="field-value" id="mappedFees">Click to map selected text</div>
                                </div>
                                <button type="button" class="field-clear-btn" onclick="clearSingleField('fees')" title="Clear this field">
                                    <i class="bi bi-x"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Action Buttons -->
                    <div class="mapping-actions">
                        <button type="button" class="action-btn action-btn-primary" id="applyMappedValues" disabled>
                            <i class="bi bi-check-circle"></i>
                            Apply to Form
                        </button>
                        <button type="button" class="action-btn action-btn-secondary" id="clearMappings">
                            <i class="bi bi-arrow-clockwise"></i>
                            Clear All
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
<script nonce="@ViewData["ScriptNonce"]">
// Set the worker source for PDF.js
pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';

// Global variables for PDF handling
let pdfDoc = null;
let pageNum = 1;
let pageRendering = false;
let pageNumPending = null;
let scale = 1.0;
let selectedText = '';
let currentFile = null;
let mappedFields = {
    date: '',
    amount: '',
    sourceCurrency: '',
    targetCurrency: '',
    bankRate: '',
    fees: ''
};

document.addEventListener('DOMContentLoaded', function() {
    
    // File input change handler
    document.getElementById('fileInput').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            currentFile = file;
            processSelectedFile(file);
        }
    });

    // Make entire upload area clickable
    document.getElementById('uploadArea').addEventListener('click', function(e) {
        // Don't trigger if clicking on buttons or form elements
        if (!e.target.closest('.btn') && 
            !e.target.closest('.btn-remove') && 
            !e.target.closest('button') &&
            !e.target.closest('input')) {
            document.getElementById('fileInput').click();
        }
    });
    
    // PDF Controls
    document.getElementById('prevPage')?.addEventListener('click', onPrevPage);
    document.getElementById('nextPage')?.addEventListener('click', onNextPage);
    document.getElementById('zoomIn')?.addEventListener('click', zoomIn);
    document.getElementById('zoomOut')?.addEventListener('click', zoomOut);
    
    // PDF Selector Overlay controls
    document.getElementById('closePdfSelector')?.addEventListener('click', hidePdfSelectorOverlay);
    
    // Close overlay when clicking outside
    document.getElementById('pdfSelectorOverlay')?.addEventListener('click', function(e) {
        if (e.target === this) {
            hidePdfSelectorOverlay();
        }
    });
    
    // Escape key to close overlay
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && document.getElementById('pdfSelectorOverlay').classList.contains('active')) {
            hidePdfSelectorOverlay();
        }
    });
    
    // Field mapping buttons - Updated for new unified interface
    document.querySelectorAll('.mapping-field-item').forEach(item => {
        item.addEventListener('click', function() {
            const field = this.dataset.field;
            if (selectedText && selectedText.trim()) {
                // Remove active state from all items
                document.querySelectorAll('.mapping-field-item').forEach(i => i.classList.remove('active'));
                // Add active state to clicked item
                this.classList.add('active');
                
                // Map the field value
                mapFieldValue(field, selectedText.trim());
                
                // Remove active state after a short delay
                setTimeout(() => {
                    this.classList.remove('active');
                }, 500);
            } else {
                // Show helpful message
                const selectedTextDiv = document.getElementById('selectedText');
                selectedTextDiv.innerHTML = '<span style="color: var(--warning-color);"><i class="bi bi-exclamation-circle"></i> Please select text from the PDF first</span>';
                selectedTextDiv.classList.add('scale-in');
                setTimeout(() => {
                    selectedTextDiv.classList.remove('scale-in');
                    if (!selectedText) {
                        selectedTextDiv.innerHTML = 'Click on words or drag to select text from the PDF';
                    }
                }, 2000);
            }
        });
    });
    
    // Action buttons
    document.getElementById('applyMappedValues')?.addEventListener('click', applyMappedValuesToForm);
    document.getElementById('clearMappings')?.addEventListener('click', clearAllMappings);
});

// Process file function
function processFile() {
    if (!currentFile) {
        alert('Please select a file first');
        return;
    }
    
    const fileName = currentFile.name.toLowerCase();
    const uploadBtn = document.getElementById('uploadBtn');
    
    // Show loading state
    uploadBtn.innerHTML = '<i class="spinner-border spinner-border-sm me-2"></i>Processing...';
    uploadBtn.disabled = true;
    
    if (fileName.endsWith('.pdf')) {
        // Show PDF selector overlay and load the PDF
        showPdfSelectorOverlay();
        loadPDF(currentFile);
        
        // Reset button state
        setTimeout(() => {
            uploadBtn.innerHTML = '<i class="bi bi-upload me-2"></i>Process File';
            uploadBtn.disabled = false;
        }, 500);
    } else {
        // Handle other file types (CSV, TXT) - for future implementation
        setTimeout(() => {
            alert('Currently only PDF files are supported for viewer functionality');
            uploadBtn.innerHTML = '<i class="bi bi-upload me-2"></i>Process File';
            uploadBtn.disabled = false;
        }, 1000);
    }
}

// Show PDF selector overlay
function showPdfSelectorOverlay() {
    const overlay = document.getElementById('pdfSelectorOverlay');
    overlay.style.display = 'flex';
    // Trigger reflow
    overlay.offsetHeight;
    overlay.classList.add('active');
    document.body.style.overflow = 'hidden';
}

// Hide PDF selector overlay
function hidePdfSelectorOverlay() {
    const overlay = document.getElementById('pdfSelectorOverlay');
    overlay.classList.remove('active');
    document.body.style.overflow = '';
    setTimeout(() => {
        overlay.style.display = 'none';
    }, 300);
}

// Load PDF function
function loadPDF(file) {
    const fileReader = new FileReader();
    const loadingDiv = document.getElementById('pdfLoading');
    const pageContainer = document.getElementById('pdfPageContainer');
    
    // Show loading state
    loadingDiv.style.display = 'flex';
    pageContainer.style.display = 'none';
    
    fileReader.onload = function() {
        const typedarray = new Uint8Array(this.result);
        
        pdfjsLib.getDocument(typedarray).promise.then(function(pdf) {
            pdfDoc = pdf;
            document.getElementById('pageCount').textContent = pdf.numPages;
            
            // Hide loading and show content
            loadingDiv.style.display = 'none';
            pageContainer.style.display = 'block';
            
            // Render the first page
            renderPage(pageNum);
            updatePdfControls();
        }).catch(function(error) {
            console.error('Error loading PDF:', error);
            loadingDiv.innerHTML = '<div class="text-danger"><i class="bi bi-exclamation-triangle"></i><br>Error loading PDF</div>';
        });
    };
    fileReader.readAsArrayBuffer(file);
}

// Update PDF controls state
function updatePdfControls() {
    const prevBtn = document.getElementById('prevPage');
    const nextBtn = document.getElementById('nextPage');
    const zoomLevel = document.querySelector('.zoom-level');
    
    if (prevBtn) prevBtn.disabled = (pageNum <= 1);
    if (nextBtn) nextBtn.disabled = (pageNum >= pdfDoc.numPages);
    if (zoomLevel) zoomLevel.textContent = Math.round(scale * 100) + '%';
}

// Render page function
function renderPage(num) {
    pageRendering = true;
    
    // Get page
    pdfDoc.getPage(num).then(function(page) {
        const viewport = page.getViewport({ scale: scale });
        
        // Get text content for rendering
        return page.getTextContent().then(function(textContent) {
            renderTextContent(textContent, viewport);
            
            pageRendering = false;
            if (pageNumPending !== null) {
                // New page rendering is pending
                renderPage(pageNumPending);
                pageNumPending = null;
            }
        });
    });
    
    // Update page counters
    document.getElementById('pageNum').textContent = num;
}

// Render text content as visible, selectable text with click-to-select words
function renderTextContent(textContent, viewport) {
    const textContainer = document.getElementById('pdfTextContent');
    textContainer.innerHTML = '';
    
    // Set container dimensions
    textContainer.style.width = Math.floor(viewport.width) + 'px';
    textContainer.style.height = Math.floor(viewport.height) + 'px';
    textContainer.style.position = 'relative';
    textContainer.style.background = '#ffffff';
    textContainer.style.border = '1px solid #ddd';
    textContainer.style.overflow = 'auto';
    textContainer.style.fontFamily = 'Arial, sans-serif';
    
    // Group text items by approximate lines for better rendering
    const lines = groupTextIntoLines(textContent.items, viewport);
    
    // Render each line
    lines.forEach(function(line, lineIndex) {
        const lineDiv = document.createElement('div');
        lineDiv.className = 'pdf-text-line';
        lineDiv.style.position = 'absolute';
        lineDiv.style.left = line.left + 'px';
        lineDiv.style.top = line.top + 'px';
        lineDiv.style.height = line.height + 'px';
        lineDiv.style.lineHeight = line.height + 'px';
        lineDiv.style.fontSize = Math.max(10, line.fontSize) + 'px';
        lineDiv.style.color = '#000000';
        lineDiv.style.cursor = 'text';
        lineDiv.style.userSelect = 'text';
        lineDiv.style.whiteSpace = 'nowrap';
        lineDiv.style.overflow = 'visible';
        
        // Add all text items in this line
        line.items.forEach(function(textItem, itemIndex) {
            const textContent = textItem.str;
            // Split by spaces and dashes, but keep separators
            const words = textContent.split(/(\s+|-)/); // Split by spaces and dashes but keep them
            
            words.forEach(function(word, wordIndex) {
                if (word.trim() && !word.match(/^\s+$/) && word !== '-') {
                    // Create clickable word spans for actual words
                    const wordSpan = document.createElement('span');
                    wordSpan.className = 'pdf-text-item word-selectable';
                    wordSpan.textContent = word;
                    wordSpan.style.fontWeight = textItem.fontName && textItem.fontName.includes('Bold') ? 'bold' : 'normal';
                    wordSpan.style.fontStyle = textItem.fontName && textItem.fontName.includes('Italic') ? 'italic' : 'normal';
                    
                    // Add click handler for word selection
                    wordSpan.addEventListener('click', function(e) {
                        e.stopPropagation();
                        selectWord(this);
                    });
                    
                    lineDiv.appendChild(wordSpan);
                } else if (word) {
                    // Add spaces and dashes as non-selectable text
                    const separatorSpan = document.createElement('span');
                    separatorSpan.className = 'pdf-text-separator';
                    separatorSpan.textContent = word;
                    lineDiv.appendChild(separatorSpan);
                }
            });
        });
        
        textContainer.appendChild(lineDiv);
    });
    
    // Remove any existing selection tooltip
    removeSelectionTooltip();
    
    // Add selection listeners for drag selection
    textContainer.addEventListener('mouseup', handleTextSelection);
    document.addEventListener('mouseup', hideTooltipOnOutsideClick);
}

// Handle word selection by click
function selectWord(wordElement) {
    // Clear any existing selections
    clearWordSelections();
    
    // Mark this word as selected
    wordElement.classList.add('word-selected');
    
    // Update selected text
    selectedText = wordElement.textContent.trim();
    updateSelectedTextDisplay();
}

// Clear all word selections
function clearWordSelections() {
    document.querySelectorAll('.word-selected').forEach(el => {
        el.classList.remove('word-selected');
    });
}

// Update selected text display
function updateSelectedTextDisplay() {
    const selectedTextDiv = document.getElementById('selectedText');
    
    if (selectedText && selectedText.trim()) {
        selectedTextDiv.textContent = selectedText;
        selectedTextDiv.classList.add('has-text', 'fade-in');
    } else {
        selectedTextDiv.textContent = 'Click on words or drag to select text from the PDF';
        selectedTextDiv.classList.remove('has-text');
    }
    
    setTimeout(() => {
        selectedTextDiv.classList.remove('fade-in');
    }, 300);
}

// Group text items into lines for better rendering
function groupTextIntoLines(textItems, viewport) {
    const lines = [];
    const lineThreshold = 5; // pixels tolerance for same line
    
    textItems.forEach(function(textItem) {
        const x = textItem.transform[4] * scale;
        const y = viewport.height - (textItem.transform[5] * scale) - (textItem.height * scale);
        const height = Math.max(12, textItem.height * scale); // Minimum height for readability
        const fontSize = Math.max(10, height * 0.8); // Slightly smaller than height for better appearance
        
        // Find existing line or create new one
        let targetLine = lines.find(line => 
            Math.abs(line.top - y) <= lineThreshold && 
            Math.abs(line.height - height) <= 3
        );
        
        if (!targetLine) {
            targetLine = {
                top: y,
                left: x,
                height: height,
                fontSize: fontSize,
                items: []
            };
            lines.push(targetLine);
        }
        
        // Update line bounds
        targetLine.left = Math.min(targetLine.left, x);
        
        // Add text item to line
        targetLine.items.push({
            str: textItem.str,
            x: x,
            spaceAfter: 0,
            fontName: textItem.fontName || '',
            width: textItem.width * scale
        });
    });
    
    // Sort items within each line by x position and calculate spacing
    lines.forEach(function(line) {
        line.items.sort((a, b) => a.x - b.x);
        
        // Calculate space after each item based on actual spacing in PDF
        for (let i = 0; i < line.items.length - 1; i++) {
            const current = line.items[i];
            const next = line.items[i + 1];
            const estimatedWidth = current.width || (current.str.length * (line.fontSize * 0.6));
            const gap = next.x - (current.x + estimatedWidth);
            
            // Add appropriate spacing (minimum 1px, maximum 50px)
            current.spaceAfter = Math.max(1, Math.min(50, gap));
        }
    });
    
    // Sort lines by vertical position
    lines.sort((a, b) => a.top - b.top);
    
    return lines;
}

// Handle text selection
function handleTextSelection(event) {
    const selection = window.getSelection();
    if (selection.toString().trim()) {
        selectedText = selection.toString().trim();
        document.getElementById('selectedText').textContent = selectedText;
        
        // Show selection tooltip
        showSelectionTooltip(event);
    } else {
        removeSelectionTooltip();
    }
}

// Show modern selection tooltip
function showSelectionTooltip(event) {
    // Remove existing tooltip
    removeSelectionTooltip();
    
    const selection = window.getSelection();
    if (!selection.rangeCount) return;
    
    const range = selection.getRangeAt(0);
    const rect = range.getBoundingClientRect();
    
    // Create tooltip
    const tooltip = document.createElement('div');
    tooltip.className = 'selection-tooltip';
    tooltip.innerHTML = `
        <div class="tooltip-header">
            <span class="selected-text-preview">"${selectedText.substring(0, 20)}${selectedText.length > 20 ? '...' : ''}"</span>
            <button class="tooltip-close" onclick="removeSelectionTooltip()">×</button>
        </div>
        <div class="tooltip-buttons">
            <button class="tooltip-btn" data-field="date">
                <i class="bi bi-calendar"></i> Date
            </button>
            <button class="tooltip-btn" data-field="amount">
                <i class="bi bi-currency-dollar"></i> Amount
            </button>
            <button class="tooltip-btn" data-field="sourceCurrency">
                <i class="bi bi-arrow-right"></i> From
            </button>
            <button class="tooltip-btn" data-field="targetCurrency">
                <i class="bi bi-arrow-left"></i> To
            </button>
            <button class="tooltip-btn" data-field="bankRate">
                <i class="bi bi-percent"></i> Rate
            </button>
            <button class="tooltip-btn" data-field="fees">
                <i class="bi bi-receipt"></i> Fees
            </button>
        </div>
    `;
    
    // Position tooltip above selection
    const tooltipTop = rect.top + window.scrollY - 120;
    const tooltipLeft = Math.max(10, Math.min(window.innerWidth - 320, rect.left + window.scrollX - 150));
    
    tooltip.style.position = 'absolute';
    tooltip.style.top = tooltipTop + 'px';
    tooltip.style.left = tooltipLeft + 'px';
    tooltip.style.zIndex = '9999';
    
    document.body.appendChild(tooltip);
    
    // Add event listeners to tooltip buttons
    tooltip.querySelectorAll('.tooltip-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.stopPropagation();
            const field = this.dataset.field;
            mapFieldValue(field, selectedText);
            removeSelectionTooltip();
            
            // Show success feedback
            showFieldMappingSuccess(field, selectedText);
        });
    });
    
    // Auto-hide after 10 seconds
    setTimeout(() => {
        removeSelectionTooltip();
    }, 10000);
}

// Remove selection tooltip
function removeSelectionTooltip() {
    const existingTooltip = document.querySelector('.selection-tooltip');
    if (existingTooltip) {
        existingTooltip.remove();
    }
}

// Hide tooltip when clicking outside
function hideTooltipOnOutsideClick(event) {
    if (!event.target.closest('.selection-tooltip') && !event.target.closest('.pdf-text-content')) {
        removeSelectionTooltip();
    }
}

// Show field mapping success feedback
function showFieldMappingSuccess(field, value) {
    const successToast = document.createElement('div');
    successToast.className = 'mapping-success-toast';
    successToast.innerHTML = `
        <i class="bi bi-check-circle-fill"></i>
        <span>Mapped "${value.substring(0, 15)}${value.length > 15 ? '...' : ''}" to ${field.charAt(0).toUpperCase() + field.slice(1)}</span>
    `;
    
    document.body.appendChild(successToast);
    
    // Animate in
    setTimeout(() => successToast.classList.add('show'), 100);
    
    // Remove after 3 seconds
    setTimeout(() => {
        successToast.classList.remove('show');
        setTimeout(() => successToast.remove(), 300);
    }, 3000);
}

// Navigation functions
function onPrevPage() {
    if (pageNum <= 1) return;
    pageNum--;
    queueRenderPage(pageNum);
}

function onNextPage() {
    if (pageNum >= pdfDoc.numPages) return;
    pageNum++;
    queueRenderPage(pageNum);
}

function queueRenderPage(num) {
    if (pageRendering) {
        pageNumPending = num;
    } else {
        renderPage(num);
    }
}

// Zoom functions
function zoomIn() {
    scale += 0.2;
    if (scale > 3.0) scale = 3.0; // Maximum zoom
    updatePdfControls();
    renderPage(pageNum);
}

function zoomOut() {
    scale -= 0.2;
    if (scale < 0.4) scale = 0.4; // Minimum zoom
    updatePdfControls();
    renderPage(pageNum);
}

// Legacy field mapping function (kept for compatibility)
function mapFieldValueLegacy(field, value) {
    mappedFields[field] = value;
    const mappedElement = document.getElementById('mapped' + field.charAt(0).toUpperCase() + field.slice(1));
    if (mappedElement) {
        mappedElement.textContent = value;
    }
    
    // Clear selection
    window.getSelection().removeAllRanges();
    selectedText = '';
    const selectedTextDiv = document.getElementById('selectedText');
    if (selectedTextDiv) {
        selectedTextDiv.textContent = 'Click and drag to select text from the PDF';
        selectedTextDiv.classList.remove('has-text');
    }
}

// Legacy clear mappings function (kept for compatibility)
function clearAllMappingsLegacy() {
    Object.keys(mappedFields).forEach(field => {
        mappedFields[field] = '';
        const mappedElement = document.getElementById('mapped' + field.charAt(0).toUpperCase() + field.slice(1));
        if (mappedElement) {
            mappedElement.textContent = '-';
        }
    });
    const selectedTextDiv = document.getElementById('selectedText');
    if (selectedTextDiv) {
        selectedTextDiv.textContent = 'Click and drag to select text from the PDF';
        selectedTextDiv.classList.remove('has-text');
    }
    selectedText = '';
}

// Remove selection tooltip
function removeSelectionTooltip() {
    const existingTooltip = document.querySelector('.selection-tooltip');
    if (existingTooltip) {
        existingTooltip.remove();
    }
}

// Hide tooltip when clicking outside
function hideTooltipOnOutsideClick(event) {
    const tooltip = document.querySelector('.selection-tooltip');
    if (tooltip && !tooltip.contains(event.target)) {
        removeSelectionTooltip();
    }
}

function applyMappedValuesToForm() {
    // Switch to manual tab
    switchToManual();
    
    // Hide the PDF overlay
    hidePdfSelectorOverlay();
    
    // Apply mapped values to form fields after a short delay
    setTimeout(() => {
        if (mappedFields.date) {
            const dateField = document.querySelector('input[name="Date"]');
            if (dateField) {
                // Try to parse and format the date
                const parsedDate = parseDate(mappedFields.date);
                if (parsedDate) {
                    dateField.value = parsedDate;
                }
            }
        }
        
        if (mappedFields.amount) {
            const amountDisplay = document.getElementById('AmountDisplay');
            const amountHidden = document.getElementById('Amount');
            if (amountDisplay && amountHidden) {
                // Extract numeric value
                const numericAmount = extractNumericValue(mappedFields.amount);
                if (numericAmount) {
                    amountHidden.value = numericAmount;
                    amountDisplay.value = formatNumberWithCommas(numericAmount);
                }
            }
        }
        
        if (mappedFields.sourceCurrency) {
            const sourceField = document.querySelector('select[name="SourceCurrency"]');
            if (sourceField) {
                // Try to match currency code
                const currencyCode = extractCurrencyCode(mappedFields.sourceCurrency);
                if (currencyCode) {
                    sourceField.value = currencyCode;
                }
            }
        }
        
        if (mappedFields.targetCurrency) {
            const targetField = document.querySelector('select[name="TargetCurrency"]');
            if (targetField) {
                const currencyCode = extractCurrencyCode(mappedFields.targetCurrency);
                if (currencyCode) {
                    targetField.value = currencyCode;
                }
            }
        }
        
        if (mappedFields.bankRate) {
            const rateField = document.querySelector('input[name="BankRate"]');
            if (rateField) {
                const numericRate = extractNumericValue(mappedFields.bankRate);
                if (numericRate) {
                    rateField.value = numericRate;
                }
            }
        }
        
        if (mappedFields.fees) {
            const feesField = document.querySelector('input[name="BankFees"]');
            if (feesField) {
                const numericFees = extractNumericValue(mappedFields.fees);
                if (numericFees) {
                    feesField.value = numericFees;
                }
            }
        }
        
        alert('Values applied to form successfully!');
    }, 500);
}

// Utility functions
function formatNumberWithCommas(num) {
    let cleanNum = num.toString().replace(/[^\d.]/g, '');
    let parts = cleanNum.split('.');
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    return parts.join('.');
}

function parseDate(dateStr) {
    // Try to parse various date formats
    const patterns = [
        /(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/,  // MM/DD/YYYY or DD/MM/YYYY
        /(\d{4})[\/\-](\d{1,2})[\/\-](\d{1,2})/,  // YYYY/MM/DD
    ];
    
    for (const pattern of patterns) {
        const match = dateStr.match(pattern);
        if (match) {
            // Assume DD/MM/YYYY format for Israeli banks
            const day = match[1].padStart(2, '0');
            const month = match[2].padStart(2, '0');
            const year = match[3];
            return `${year}-${month}-${day}`;
        }
    }
    return null;
}

function extractNumericValue(str) {
    // Extract numeric value, handling commas and currency symbols
    const match = str.replace(/[^\d.,]/g, '').replace(/,/g, '');
    return match ? parseFloat(match) : null;
}

function extractCurrencyCode(str) {
    // Common currency codes
    const currencies = ['USD', 'EUR', 'GBP', 'ILS', 'JPY', 'CAD', 'AUD', 'CHF'];
    const upperStr = str.toUpperCase();
    
    for (const currency of currencies) {
        if (upperStr.includes(currency)) {
            return currency;
        }
    }
    return null;
}

// Existing functions (keep these)
function handleDragOver(e) {
    e.preventDefault();
    e.stopPropagation();
    const uploadArea = document.getElementById('uploadArea');
    uploadArea.classList.add('drag-over');
    uploadArea.style.borderColor = 'var(--clearshift-teal)';
    uploadArea.style.backgroundColor = 'rgba(74, 157, 168, 0.1)';
}

function handleDragLeave(e) {
    e.preventDefault();
    e.stopPropagation();
    
    // Only remove styles if we're actually leaving the upload area
    if (!e.currentTarget.contains(e.relatedTarget)) {
        const uploadArea = document.getElementById('uploadArea');
        uploadArea.classList.remove('drag-over');
        uploadArea.style.borderColor = '';
        uploadArea.style.backgroundColor = '';
    }
}

function handleFileDrop(e) {
    e.preventDefault();
    e.stopPropagation();
    
    const uploadArea = document.getElementById('uploadArea');
    uploadArea.classList.remove('drag-over');
    uploadArea.style.borderColor = '';
    uploadArea.style.backgroundColor = '';
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
        const file = files[0];
        currentFile = file;
        processSelectedFile(file);
        
        // Update the file input
        const fileInput = document.getElementById('fileInput');
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        fileInput.files = dataTransfer.files;
    }
}

function processSelectedFile(file) {
    const allowedTypes = ['.pdf', '.csv', '.txt'];
    const fileName = file.name.toLowerCase();
    const isValidType = allowedTypes.some(type => fileName.endsWith(type));
    
    const errorDiv = document.getElementById('uploadError');
    
    if (!isValidType) {
        errorDiv.textContent = 'Please upload a valid file (PDF, CSV, or TXT only)';
        errorDiv.style.display = 'block';
        removeFile();
        return;
    }
    
    // Check file size (limit to 10MB)
    const maxSize = 10 * 1024 * 1024; // 10MB in bytes
    if (file.size > maxSize) {
        errorDiv.textContent = 'File size must be less than 10MB';
        errorDiv.style.display = 'block';
        removeFile();
        return;
    }
    
    // Sanitize file name for display (security measure)
    const sanitizedFileName = sanitizeFileName(file.name);
    
    // Hide error and show file info
    errorDiv.style.display = 'none';
    document.querySelector('.file-name').textContent = sanitizedFileName;
    document.getElementById('fileInfo').style.display = 'block';
    document.getElementById('uploadBtn').style.display = 'inline-block';
    
    console.log('File selected:', sanitizedFileName, 'Size:', file.size, 'Type:', file.type);
}

function sanitizeFileName(fileName) {
    // Remove potentially dangerous characters and limit length
    let sanitized = fileName
        .replace(/[<>:"/\\|?*\x00-\x1f]/g, '') // Remove dangerous characters
        .replace(/\.\./g, '') // Remove directory traversal attempts
        .trim();
    
    // Limit length to prevent issues
    if (sanitized.length > 255) {
        const extension = sanitized.substring(sanitized.lastIndexOf('.'));
        const name = sanitized.substring(0, 255 - extension.length);
        sanitized = name + extension;
    }
    
    // Ensure it's not empty after sanitization
    if (!sanitized || sanitized === '') {
        sanitized = 'unnamed_file';
    }
    
    return sanitized;
}

function removeFile() {
    document.getElementById('fileInput').value = '';
    document.getElementById('fileInfo').style.display = 'none';
    document.getElementById('uploadError').style.display = 'none';
    document.getElementById('uploadBtn').style.display = 'none';
    hidePdfSelectorOverlay();
    currentFile = null;
    
    // Reset PDF viewer state
    pdfDoc = null;
    pageNum = 1;
    scale = 1.2;
    selectedText = '';
    clearAllMappings();
}

// Text selection handler for drag selection
function handleTextSelection() {
    const selection = window.getSelection();
    const newSelectedText = selection.toString().trim();
    
    if (newSelectedText && newSelectedText !== selectedText) {
        // Clear word selections when using drag selection
        clearWordSelections();
        
        selectedText = newSelectedText;
        updateSelectedTextDisplay();
        
        // Highlight the selected text in the PDF
        highlightSelectedText(selection);
    } else if (!newSelectedText) {
        // Only clear if there's no word selection either
        const hasWordSelection = document.querySelector('.word-selected');
        if (!hasWordSelection) {
            selectedText = '';
            updateSelectedTextDisplay();
            removeHighlights();
        }
    }
}

// Highlight selected text in PDF
function highlightSelectedText(selection) {
    removeHighlights();
    
    if (selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        const span = document.createElement('span');
        span.className = 'highlighted';
        
        try {
            range.surroundContents(span);
        } catch (e) {
            // If can't surround contents, create a new span
            span.textContent = range.toString();
            range.deleteContents();
            range.insertNode(span);
        }
    }
}

// Remove highlights
function removeHighlights() {
    document.querySelectorAll('.pdf-text-content .highlighted').forEach(el => {
        const parent = el.parentNode;
        parent.replaceChild(document.createTextNode(el.textContent), el);
        parent.normalize();
    });
}

// Map field value with new unified interface
function mapFieldValue(field, value) {
    let processedValue = value;
    
    // Process the value based on field type
    switch (field) {
        case 'date':
            processedValue = processDateValue(value) || value;
            break;
        case 'amount':
        case 'bankRate':
        case 'fees':
            const numericValue = extractNumericValue(value);
            processedValue = numericValue !== null ? numericValue.toString() : value;
            break;
        case 'sourceCurrency':
        case 'targetCurrency':
            processedValue = extractCurrencyCode(value) || value;
            break;
    }
    
    // Store the mapped value
    mappedFields[field] = processedValue;
    
    // Update the unified field display
    const fieldElement = document.getElementById(`mapped${field.charAt(0).toUpperCase() + field.slice(1)}`);
    const fieldItem = document.querySelector(`[data-field="${field}"].mapping-field-item`);
    const fieldStatus = fieldItem?.querySelector('.field-status');
    
    if (fieldElement && fieldItem) {
        fieldElement.textContent = processedValue;
        fieldItem.classList.add('filled');
        
        if (fieldStatus) {
            fieldStatus.textContent = 'Mapped';
            fieldStatus.classList.remove('empty');
            fieldStatus.classList.add('filled');
        }
    }
    
    // Update apply button state
    updateApplyButtonState();
    
    // Show success feedback
    showFieldMappedFeedback(field);
    
    // Clear selections after mapping
    setTimeout(() => {
        clearWordSelections();
        selectedText = '';
        updateSelectedTextDisplay();
        removeHighlights();
        window.getSelection().removeAllRanges();
    }, 1000);
}

// Clear a single field
function clearSingleField(field) {
    mappedFields[field] = '';
    
    const fieldElement = document.getElementById(`mapped${field.charAt(0).toUpperCase() + field.slice(1)}`);
    const fieldItem = document.querySelector(`[data-field="${field}"].mapping-field-item`);
    const fieldStatus = fieldItem?.querySelector('.field-status');
    
    if (fieldElement && fieldItem) {
        fieldElement.textContent = 'Click to map selected text';
        fieldItem.classList.remove('filled', 'active');
        
        if (fieldStatus) {
            fieldStatus.textContent = 'Empty';
            fieldStatus.classList.remove('filled');
            fieldStatus.classList.add('empty');
        }
    }
    
    updateApplyButtonState();
}

// Show field mapped feedback for unified interface
function showFieldMappedFeedback(field) {
    const fieldItem = document.querySelector(`[data-field="${field}"].mapping-field-item`);
    if (fieldItem) {
        const fieldLabel = fieldItem.querySelector('.field-label');
        const originalHTML = fieldLabel.innerHTML;
        
        fieldLabel.innerHTML = '<i class="bi bi-check-circle field-icon" style="color: var(--success-color);"></i>Mapped Successfully!';
        fieldItem.classList.add('scale-in');
        
        setTimeout(() => {
            fieldLabel.innerHTML = originalHTML;
            fieldItem.classList.remove('scale-in');
        }, 1500);
    }
}

// Update apply button state
function updateApplyButtonState() {
    const applyButton = document.getElementById('applyMappedValues');
    const hasMappedValues = Object.values(mappedFields).some(value => value && value.trim());
    
    if (applyButton) {
        applyButton.disabled = !hasMappedValues;
        
        if (hasMappedValues) {
            applyButton.innerHTML = '<i class="bi bi-check-circle"></i>Apply to Form';
        } else {
            applyButton.innerHTML = '<i class="bi bi-check-circle"></i>Apply to Form';
        }
    }
}

// Clear all mappings with unified interface
function clearAllMappings() {
    // Reset mapped fields
    Object.keys(mappedFields).forEach(field => {
        mappedFields[field] = '';
        
        const fieldElement = document.getElementById(`mapped${field.charAt(0).toUpperCase() + field.slice(1)}`);
        const fieldItem = document.querySelector(`[data-field="${field}"].mapping-field-item`);
        const fieldStatus = fieldItem?.querySelector('.field-status');
        
        if (fieldElement && fieldItem) {
            fieldElement.textContent = 'Click to map selected text';
            fieldItem.classList.remove('filled', 'active');
            
            if (fieldStatus) {
                fieldStatus.textContent = 'Empty';
                fieldStatus.classList.remove('filled');
                fieldStatus.classList.add('empty');
            }
        }
    });
    
    // Clear selected text
    selectedText = '';
    const selectedTextDiv = document.getElementById('selectedText');
    selectedTextDiv.textContent = 'Click on words or drag to select text from the PDF';
    selectedTextDiv.classList.remove('has-text');
    
    // Remove highlights and word selections
    removeHighlights();
    clearWordSelections();
    
    // Update apply button
    updateApplyButtonState();
    
    // Clear any text selection
    window.getSelection().removeAllRanges();
}

function switchToManual() {
    // Find and click the manual input tab button
    const manualTab = document.querySelector('[data-tab="manual"]');
    if (manualTab) {
        manualTab.click();
    } else {
        // Alternative method if tab structure is different
        const tabButtons = document.querySelectorAll('.tab-button');
        tabButtons.forEach(function(button) {
            if (button.textContent.includes('Manual') || button.textContent.includes('manual')) {
                button.click();
            }
        });
    }
}

// Prevent default drag behaviors on the document
document.addEventListener('dragover', function(e) {
    e.preventDefault();
});

document.addEventListener('drop', function(e) {
    e.preventDefault();
});
</script>