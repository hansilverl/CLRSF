@model CurrencyComparisonModel
@{
    // Get all currencies except ILS to create necessary validation lists
    var nonIlsCurrencies = CurrencyConstants.AllowedCurrencies.Where(c => c != "ILS").ToList();
}

<div class="card mb-4">
<div class="nav nav-tabs justify-content-center" id="input-tabs" role="tablist">
  <button class="nav-link d-flex align-items-center text-center px-4" id="upload-tab" data-bs-toggle="tab" data-bs-target="#upload-panel" type="button" role="tab">
    <i class="bi bi-upload me-2"></i> Upload Bank File
  </button>
  <button class="nav-link active d-flex align-items-center text-center px-4" id="manual-tab" data-bs-toggle="tab" data-bs-target="#manual-panel" type="button" role="tab">
    <i class="bi bi-pencil me-2"></i> Manual Input
  </button>
  <button class="nav-link d-flex align-items-center text-center px-4" id="custom-tab" data-bs-toggle="tab" data-bs-target="#custom-panel" type="button" role="tab">
    <i class="bi bi-file-text me-2"></i> Custom Text File
  </button>
</div>
    
    <div class="tab-content p-4" id="input-tabContent">
      <div class="tab-pane fade" id="upload-panel" role="tabpanel">
        <div class="border-dashed drag-drop-area">
          <div class="text-center py-5 px-3">
            <div class="upload-icon mb-3">
              <i class="bi bi-upload me-2"></i>
            </div>
            <p class="text-secondary mb-4">Drag and drop your bank file here, or click to browse</p>
            <button class="btn btn-primary">Select File</button>
          </div>
        </div>
      </div>
      
      <div class="tab-pane fade show active" id="manual-panel" role="tabpanel">
        <form asp-action="Calculate" method="post">
          <div class="row g-3">
            <div class="col-md-6">
              <label asp-for="Date" class="form-label">Transaction Date</label>
              <input asp-for="Date" type="date" class="form-control" />
              <span asp-validation-for="Date" class="text-danger small"></span>
            </div>
            <div class="col-md-6">
              <label asp-for="BankRate" class="form-label">Bank Exchange Rate</label>
              <input asp-for="BankRate" type="number" step="0.0001" class="form-control" />
              <span asp-validation-for="BankRate" class="text-danger small"></span>
            </div>
            <div class="col-md-6">
              <label asp-for="BankFees" class="form-label">Bank Fees (%)</label>
              <div class="input-group">
                <input asp-for="BankFees" type="number" step="0.01" class="form-control" />
                <span class="input-group-text">%</span>
              </div>
              <span asp-validation-for="BankFees" class="text-danger small"></span>
            </div>
            <div class="col-md-6">
              <label asp-for="Amount" class="form-label">Amount to Convert</label>
              <input asp-for="Amount" type="number" step="0.01" class="form-control" />
              <span asp-validation-for="Amount" class="text-danger small"></span>
            </div>
            <div class="col-md-6">
              <label asp-for="SourceCurrency" class="form-label">Source Currency</label>
              <select asp-for="SourceCurrency" class="form-select" id="sourceCurrency" onchange="synchronizeCurrencies('source')">
                @foreach (var currency in CurrencyConstants.AllowedCurrencies)
                {
                  <option value="@currency">@currency</option>
                }
              </select>
            </div>
            <div class="col-md-6">
              <label asp-for="TargetCurrency" class="form-label">Target Currency</label>
              <select asp-for="TargetCurrency" class="form-select" id="targetCurrency" onchange="synchronizeCurrencies('target')">
                @foreach (var currency in CurrencyConstants.AllowedCurrencies)
                {
                  <option value="@currency">@currency</option>
                }
              </select>
            </div>
            <div class="col-12 text-center mt-4">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
          </div>
        </form>
      </div>
      
      <div class="tab-pane fade" id="custom-panel" role="tabpanel">
        <div class="border-dashed drag-drop-area">
          <div class="text-center py-5 px-3">
            <div class="upload-icon mb-3">
              <i class="bi bi-file-earmark-text"></i>
            </div>
            <p class="text-secondary mb-4">Upload your custom text file with conversion details</p>
            <button class="btn btn-primary">Upload Text File</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

@* Razor syntax for handling the currency synchronization without JavaScript *@
@{
    // Make sure one currency is always ILS by default
    if (Model.SourceCurrency != "ILS" && Model.TargetCurrency != "ILS")
    {
        Model.TargetCurrency = "ILS";
    }
}

@* In Razor, we're going to need some minimal JS since Razor only runs server-side *@
<script>
    // Function to synchronize currencies so one is always ILS
    function synchronizeCurrencies(changed) {
        var sourceDropdown = document.getElementById('sourceCurrency');
        var targetDropdown = document.getElementById('targetCurrency');
        
        // Get current values
        var sourceValue = sourceDropdown.value;
        var targetValue = targetDropdown.value;
        
        // If both are non-ILS or both are ILS, adjust the other dropdown
        if (sourceValue !== 'ILS' && targetValue !== 'ILS') {
            // If source was changed, make target ILS
            if (changed === 'source') {
                targetDropdown.value = 'ILS';
            } 
            // If target was changed, make source ILS
            else if (changed === 'target') {
                sourceDropdown.value = 'ILS';
            }
        } else if (sourceValue === 'ILS' && targetValue === 'ILS') {
            // If source was changed to ILS and target was already ILS, set source to something else (USD)
            if (changed === 'source') {
                sourceDropdown.value = 'USD';
            } 
            // If target was changed to ILS and source was already ILS, set target to something else (USD)
            else if (changed === 'target') {
                targetDropdown.value = 'USD';
            }
        }
    }
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        // This ensures that on page load, one currency is always ILS
        synchronizeCurrencies('source');
    });
</script>