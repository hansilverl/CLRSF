@model CurrencyComparisonModel
@using CurrencyComparisonTool.Models

<form asp-action="Calculate" method="post" class="currency-form">
    <div class="conversion-container">
        <!-- Amount Input -->
        <div class="amount-section">
            <label class="form-label">Amount</label>
            <div class="amount-input-group">
                <input asp-for="Amount" type="number" step="0.01" class="amount-input" placeholder="50,000" />
                <span asp-validation-for="Amount" class="validation-error"></span>
            </div>
        </div>

        <!-- Currency Selection -->
        <div class="currency-section">
            <div class="currency-pair">
                <div class="currency-selector from-currency">
                    <label class="currency-label">From</label>
                    <select asp-for="SourceCurrency" class="currency-dropdown" id="sourceCurrency" onchange="handleCurrencyChange()">
                        @foreach (var currency in CurrencyConstants.AllowedCurrencies)
                        {
                            <option value="@currency" selected="@(currency == Model.SourceCurrency)">
                                @CurrencyConstants.CurrencySymbols[currency] @currency
                            </option>
                        }
                    </select>
                </div>

                <div class="currency-swap">
                    <button type="button" class="swap-button" onclick="swapCurrencies()">
                        <i class="bi bi-arrow-left-right"></i>
                    </button>
                </div>

                <div class="currency-selector to-currency">
                    <label class="currency-label">To</label>
                    <select asp-for="TargetCurrency" class="currency-dropdown" id="targetCurrency" onchange="handleCurrencyChange()">
                        @foreach (var currency in CurrencyConstants.AllowedCurrencies)
                        {
                            <option value="@currency" selected="@(currency == Model.TargetCurrency)">
                                @CurrencyConstants.CurrencySymbols[currency] @currency
                            </option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <!-- Bank Details -->
        <div class="bank-details-section">
            <div class="row g-3">
                <div class="col-md-4">
                    <label asp-for="Date" class="form-label">Transaction Date</label>
                    <input asp-for="Date" type="date" class="form-control modern-input" />
                    <span asp-validation-for="Date" class="validation-error"></span>
                </div>
                <div class="col-md-4">
                    <label asp-for="BankRate" class="form-label">Bank Exchange Rate</label>
                    <input asp-for="BankRate" type="number" step="0.0001" class="form-control modern-input" placeholder="3.7500" />
                    <span asp-validation-for="BankRate" class="validation-error"></span>
                </div>
                <div class="col-md-4">
                    <label asp-for="BankFees" class="form-label">Bank Fees (%)</label>
                    <div class="input-group">
                        <input asp-for="BankFees" type="number" step="0.01" class="form-control modern-input" placeholder="1.25" />
                        <span class="input-group-text">%</span>
                    </div>
                    <span asp-validation-for="BankFees" class="validation-error"></span>
                </div>
            </div>
        </div>

        <!-- Submit Button -->
        <div class="submit-section">
            <button type="submit" class="convert-button">
                <i class="bi bi-calculator me-2"></i>
                Compare Rates
            </button>
        </div>
    </div>
</form>

<script>
function handleCurrencyChange() {
    const sourceDropdown = document.getElementById('sourceCurrency');
    const targetDropdown = document.getElementById('targetCurrency');
    const sourceValue = sourceDropdown.value;
    const targetValue = targetDropdown.value;
    
    // Ensure at least one currency is ILS
    if (sourceValue !== 'ILS' && targetValue !== 'ILS') {
        targetDropdown.value = 'ILS';
    }
    
    // Prevent both currencies from being the same
    if (sourceValue === targetValue) {
        if (sourceValue === 'ILS') {
            targetDropdown.value = 'USD';
        } else {
            targetDropdown.value = 'ILS';
        }
    }
}

function swapCurrencies() {
    const sourceDropdown = document.getElementById('sourceCurrency');
    const targetDropdown = document.getElementById('targetCurrency');
    
    const tempValue = sourceDropdown.value;
    sourceDropdown.value = targetDropdown.value;
    targetDropdown.value = tempValue;
    
    handleCurrencyChange();
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    handleCurrencyChange();
});
</script>