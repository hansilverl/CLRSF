@page
@model CurrencyComparisonTool.Pages.Pdf.UploadModel
@{
    ViewData["Title"] = "PDF Mapping";
}

<h2>PDF Mapping</h2>

@if(Model.PdfData == null)
{
    <form method="post" enctype="multipart/form-data">
        <input asp-for="PdfFile" type="file" accept="application/pdf" />
        <button type="submit">Upload</button>
    </form>
    if(!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="text-danger">@Model.ErrorMessage</div>
    }
}
else
{
    <div id="pdfContainer"></div>
    <div id="mappingControls" class="mt-3">
        <label for="fieldSelect">Map selected text to:</label>
        <select id="fieldSelect" class="form-select form-select-sm d-inline-block" style="width:auto">
            <option value="Amount">Amount</option>
            <option value="Currency">Currency</option>
            <option value="Date">Date</option>
        </select>
        <button id="assignBtn" class="btn btn-sm btn-primary">Assign</button>
    </div>
    <div class="mt-3">
        <h4>Mapped Fields</h4>
        <table class="table table-bordered table-sm" id="mappingTable">
            <thead>
                <tr><th>Field</th><th>Text</th><th></th></tr>
            </thead>
            <tbody></tbody>
        </table>
        <button id="continueBtn" class="btn btn-success" disabled>Continue</button>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.9.179/pdf.min.js"></script>
    <script>
    const pdfData = "@Model.PdfData";
    const wordData = @Html.Raw(Model.WordDataJson ?? "[]");
    const requiredFields = ['Amount','Currency','Date'];
    const mappings = {};
    let selectedWord = null;

    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.9.179/pdf.worker.min.js';
    const container = document.getElementById('pdfContainer');

    const pdfBytes = Uint8Array.from(atob(pdfData), c => c.charCodeAt(0));
    pdfjsLib.getDocument({data: pdfBytes}).promise.then(function(doc){
        for(let i=1;i<=doc.numPages;i++){
            doc.getPage(i).then(page=>{
                const viewport = page.getViewport({scale:1});
                const canvas = document.createElement('canvas');
                canvas.width = viewport.width;
                canvas.height = viewport.height;
                canvas.className = 'mb-2';
                container.appendChild(canvas);
                const ctx = canvas.getContext('2d');
                page.render({canvasContext: ctx, viewport: viewport});
                const overlay = document.createElement('div');
                overlay.style.position = 'absolute';
                overlay.style.left = canvas.offsetLeft + 'px';
                overlay.style.top = canvas.offsetTop + 'px';
                overlay.style.width = canvas.width + 'px';
                overlay.style.height = canvas.height + 'px';
                overlay.style.pointerEvents = 'none';
                overlay.className = 'position-absolute';
                container.appendChild(overlay);

                wordData.filter(w=>w.Page==i).forEach(w=>{
                    const span = document.createElement('span');
                    span.textContent = w.Text;
                    span.style.position = 'absolute';
                    const scale = viewport.transform[0];
                    span.style.left = (w.X*scale)+'px';
                    span.style.top = (w.Y*scale)+'px';
                    span.style.width = (w.Width*scale)+'px';
                    span.style.height = (w.Height*scale)+'px';
                    span.style.pointerEvents = 'auto';
                    span.style.cursor = 'pointer';
                    span.dataset.text = w.Text;
                    span.addEventListener('click', ()=>{
                        if(selectedWord) selectedWord.classList.remove('bg-warning');
                        selectedWord = span;
                        span.classList.add('bg-warning');
                    });
                    overlay.appendChild(span);
                });
            });
        }
    });

    document.getElementById('assignBtn').addEventListener('click', function(){
        if(!selectedWord) return;
        const field = document.getElementById('fieldSelect').value;
        mappings[field] = selectedWord.dataset.text;
        renderMappings();
        selectedWord.classList.remove('bg-warning');
        selectedWord.classList.add('bg-success', 'text-white');
        selectedWord = null;
    });

    function renderMappings(){
        const tbody = document.querySelector('#mappingTable tbody');
        tbody.innerHTML='';
        for(const [field,text] of Object.entries(mappings)){
            const tr = document.createElement('tr');
            tr.innerHTML = `<td>${field}</td><td>${text}</td><td><button class='btn btn-sm btn-danger' data-field='${field}'>Remove</button></td>`;
            tbody.appendChild(tr);
        }
        tbody.querySelectorAll('button').forEach(btn=>{
            btn.addEventListener('click', ()=>{
                const f = btn.dataset.field;
                delete mappings[f];
                renderMappings();
            });
        });
        const ready = requiredFields.every(f=>mappings[f]);
        document.getElementById('continueBtn').disabled = !ready;
    }
    </script>
}
